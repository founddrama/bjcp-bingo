{"version":3,"sources":["phrases/bingo-phrases.js","components/BingoSquare.js","components/Bingo.js","utils/cyrb53-hash.js","index.js"],"names":["FREE","bingoPhrases","BingoSquare","props","setSelected","selected","state","setState","generateCssClassNames","phrase","classNames","push","join","this","className","onClick","React","PureComponent","phrases","setOfPhrases","Set","copyOfSource","concat","item","Math","floor","random","length","add","filter","size","squares","Array","from","splice","getBingoPhrases","Bingo","map","str","ch","seed","h1","h2","i","charCodeAt","imul","cyrb53","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAAaA,EAAO,OAEdC,EAAe,CAAC,SAAD,uyC,WCqCNC,E,kDAnCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAKRC,YAAc,WACZ,IAAQC,EAAa,EAAKC,MAAlBD,SACR,EAAKE,SAAS,CAAEF,UAAWA,KARV,EAWnBG,sBAAwB,SAACC,GACvB,IAAMC,EAAa,CAAC,gBAQpB,OAPI,EAAKJ,MAAMD,UACbK,EAAWC,KAAK,YAEdF,IAAWT,GACbU,EAAWC,KAAK,eAGXD,EAAWE,KAAK,MAjBvB,EAAKN,MAAQ,CAAED,UAAU,GAHR,E,0CAuBnB,WACE,IAAQI,EAAWI,KAAKV,MAAhBM,OACFC,EAAaG,KAAKL,sBAAsBC,GAE9C,OACE,qBAAKK,UAAWJ,EAAYK,QAASF,KAAKT,YAA1C,SACE,+BAAOK,U,GA9BWO,IAAMC,eCChC,IAAMC,EFyCS,WAIb,IAHA,IAAMC,EAAe,IAAIC,IACrBC,EAAe,GAAGC,OAAOrB,GAFW,aAKtC,IAAMsB,EAAOF,EAAaG,KAAKC,MAAMD,KAAKE,SAAWL,EAAaM,SAClER,EAAaS,IAAIL,GACjBF,EAAeA,EAAaQ,QAAO,SAAApB,GAAM,OAAIA,IAAWc,MAHnDJ,EAAaW,KAAO,IAAK,IAMhC,IAAMC,EAAUC,MAAMC,KAAKd,GAG3B,OAFAY,EAAQG,OAAO,GAAI,EAAGlC,GAEf+B,EEtDOI,GAYDC,MAVf,WACE,OACE,sBAAMtB,UAAU,QAAhB,SACGI,EAAQmB,KAAI,SAAA5B,GAAM,OACjB,cAAC,EAAD,CAAkCA,OAAQA,GCRnC,SAAgB6B,GAI7B,IAJ6C,IAI7BC,EAJkBC,EAAU,uDAAH,EACrCC,EAAK,WAAaD,EAClBE,EAAK,WAAaF,EAEbG,EAAI,EAAOA,EAAIL,EAAIX,OAAQgB,IAClCJ,EAAKD,EAAIM,WAAWD,GACpBF,EAAKjB,KAAKqB,KAAKJ,EAAKF,EAAI,YACxBG,EAAKlB,KAAKqB,KAAKH,EAAKH,EAAI,YAI1B,OAFAE,EAAKjB,KAAKqB,KAAKJ,EAAMA,IAAK,GAAK,YAAcjB,KAAKqB,KAAKH,EAAMA,IAAK,GAAK,YAEhE,YAAc,SADrBA,EAAKlB,KAAKqB,KAAKH,EAAMA,IAAK,GAAK,YAAclB,KAAKqB,KAAKJ,EAAMA,IAAK,GAAK,eACjCA,IAAK,GDHnBK,CAAOrC,UELjCsC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.70191f71.chunk.js","sourcesContent":["export const FREE = 'FREE';\n\nconst bingoPhrases = [\n  `Gusher`,\n  `Diacetyl`,\n  `Acetaldehyde`,\n  `Chlorophenol`,\n  `Skunky`,\n  `Butyric acid`,\n  `DMS`,\n  `Ethyl acetate`,\n  `Ethyl hexanoate`,\n  `Isovaleric acid`,\n  `Enteric`,\n  `\"Tastes like cardboard.\"`,\n  `\"This would score better as…\"`,\n  `\"PLEASE don’t put me in Category 34.\"`,\n  `Hop burn`,\n  `\"I swear I can taste extract.\"`,\n  `IPA entry specifically mentions 6+ hops`,\n  `“PLEASE don’t put me in wood-aged beers.”`,\n  `Wood-aged beer entry mentions wood you've never heard of before`,\n  `Pencil lead breaks`,\n  `Calibration beer is an American Brown Ale`,\n  `American Brown Ale passed off as British Brown Ale`,\n  `Scottish Export has unfortunate peat smoke character`,\n  `VERY sulfury lager`,\n  `Fruit Beer has fruit you're pretty sure is illegal`,\n  `\"Do I have any volunteers to judge the IPA category?\"`,\n  `IPA category needs at least 4 judges`,\n  `Courtesy 13`,\n  `Legitimate 40+ beer`,\n  `Infected American Pale Ale passed off as \"Belgian\"`,\n  `Entered as Irish Red; tastes like a Killian's`,\n  `\"Barrel-aged Bière de Garde\" is just infected`,\n  `Every Saison compared to Dupont`,\n  `Judging flight includes mis-mathched orphaned styles`,\n  `Best of Show is an American Light Lager`,\n  `Best of Show is an Imperial Stout`,\n  `Distinctly shaped bottle and you just KNOW who entered it`,\n  `Beer tastes WONDERFUL but is sadly miscategorized`,\n  `Blacked out vanity cap`,\n  `A can shows up in the flight`,\n];\n\nexport default function getBingoPhrases() {\n  const setOfPhrases = new Set();\n  let copyOfSource = [].concat(bingoPhrases);\n\n  while (setOfPhrases.size < 24) {\n    const item = copyOfSource[Math.floor(Math.random() * copyOfSource.length)];\n    setOfPhrases.add(item);\n    copyOfSource = copyOfSource.filter(phrase => phrase !== item);\n  }\n\n  const squares = Array.from(setOfPhrases);\n  squares.splice(12, 0, FREE);\n\n  return squares;\n}\n","import React from 'react';\nimport { FREE } from '../phrases/bingo-phrases';\n\nclass BingoSquare extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = { selected: false };\n  }\n\n  setSelected = () => {\n    const { selected } = this.state;\n    this.setState({ selected: !selected });\n  };\n\n  generateCssClassNames = (phrase) => {\n    const classNames = ['bingo-square'];\n    if (this.state.selected) {\n      classNames.push('selected');\n    }\n    if (phrase === FREE) {\n      classNames.push('free-square');\n    }\n\n    return classNames.join(' ');\n  };\n\n  render() {\n    const { phrase } = this.props;\n    const classNames = this.generateCssClassNames(phrase);\n\n    return (\n      <div className={classNames} onClick={this.setSelected}>\n        <span>{phrase}</span>\n      </div>\n    );\n  }\n}\n\nexport default BingoSquare;\n","import BingoSquare from './BingoSquare';\nimport getBingoPhrases from '../phrases/bingo-phrases';\nimport cyrb53 from '../utils/cyrb53-hash';\n\nconst phrases = getBingoPhrases();\n\nfunction Bingo() {\n  return (\n    <main className=\"Bingo\">\n      {phrases.map(phrase => (\n        <BingoSquare key={cyrb53(phrase)} phrase={phrase} />\n      ))}\n    </main>\n  );\n}\n\nexport default Bingo;\n","// source: https://stackoverflow.com/a/52171480/623654\n\nexport default function cyrb53(str, seed = 0) {\n  let h1 = 0xdeadbeef ^ seed;\n  let h2 = 0x41c6ce57 ^ seed;\n\n  for (let i = 0, ch; i < str.length; i++) {\n    ch = str.charCodeAt(i);\n    h1 = Math.imul(h1 ^ ch, 2654435761);\n    h2 = Math.imul(h2 ^ ch, 1597334677);\n  }\n  h1 = Math.imul(h1 ^ (h1>>>16), 2246822507) ^ Math.imul(h2 ^ (h2>>>13), 3266489909);\n  h2 = Math.imul(h2 ^ (h2>>>16), 2246822507) ^ Math.imul(h1 ^ (h1>>>13), 3266489909);\n  return 4294967296 * (2097151 & h2) + (h1>>>0);\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport Bingo from './components/Bingo';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Bingo />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}